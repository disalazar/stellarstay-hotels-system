version: '3.8'
services:
  db:
    image: postgres:15-alpine
    container_name: stellarstay_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./src/main/resources/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      - stellarstay_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: stellarstay_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - stellarstay_net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: stellarstay_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - stellarstay_net

  prometheus:
    image: prom/prometheus:latest
    container_name: stellarstay_prometheus
    volumes:
      - ./prometheus.local.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - stellarstay_net

volumes:
  db_data:

networks:
  stellarstay_net:
    driver: bridge

# Usage:
# 1. Copy .env.example to .env and adjust values as needed.
# 2. Run: docker compose -f docker-compose.dev.yml up -d
#
# This will start only the dependencies (no app service).
# Run the Spring Boot app from IntelliJ or your IDE.
